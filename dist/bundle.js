!function(){var t={9662:function(t,n,r){var e=r(614),o=r(6330);t.exports=function(t){if(e(t))return t;throw TypeError(o(t)+" is not a function")}},9483:function(t,n,r){var e=r(4411),o=r(6330);t.exports=function(t){if(e(t))return t;throw TypeError(o(t)+" is not a constructor")}},6077:function(t,n,r){var e=r(614);t.exports=function(t){if("object"==typeof t||e(t))return t;throw TypeError("Can't set "+String(t)+" as a prototype")}},5787:function(t){t.exports=function(t,n,r){if(t instanceof n)return t;throw TypeError("Incorrect "+(r?r+" ":"")+"invocation")}},9670:function(t,n,r){var e=r(111);t.exports=function(t){if(e(t))return t;throw TypeError(String(t)+" is not an object")}},8533:function(t,n,r){"use strict";var e=r(2092).forEach,o=r(9341)("forEach");t.exports=o?[].forEach:function(t){return e(this,t,arguments.length>1?arguments[1]:void 0)}},1318:function(t,n,r){var e=r(5656),o=r(1400),i=r(6244),c=function(t){return function(n,r,c){var a,u=e(n),s=i(u),f=o(c,s);if(t&&r!=r){for(;s>f;)if((a=u[f++])!=a)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},2092:function(t,n,r){var e=r(9974),o=r(8361),i=r(7908),c=r(6244),a=r(5417),u=[].push,s=function(t){var n=1==t,r=2==t,s=3==t,f=4==t,l=6==t,p=7==t,v=5==t||l;return function(h,d,m,y){for(var A,g,b=i(h),x=o(b),w=e(d,m,3),E=c(x),C=0,S=y||a,j=n?S(h,E):r||p?S(h,0):void 0;E>C;C++)if((v||C in x)&&(g=w(A=x[C],C,b),t))if(n)j[C]=g;else if(g)switch(t){case 3:return!0;case 5:return A;case 6:return C;case 2:u.call(j,A)}else switch(t){case 4:return!1;case 7:u.call(j,A)}return l?-1:s||f?f:j}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterReject:s(7)}},1194:function(t,n,r){var e=r(7293),o=r(5112),i=r(7392),c=o("species");t.exports=function(t){return i>=51||!e((function(){var n=[];return(n.constructor={})[c]=function(){return{foo:1}},1!==n[t](Boolean).foo}))}},9341:function(t,n,r){"use strict";var e=r(7293);t.exports=function(t,n){var r=[][t];return!!r&&e((function(){r.call(null,n||function(){throw 1},1)}))}},7475:function(t,n,r){var e=r(3157),o=r(4411),i=r(111),c=r(5112)("species");t.exports=function(t){var n;return e(t)&&(n=t.constructor,(o(n)&&(n===Array||e(n.prototype))||i(n)&&null===(n=n[c]))&&(n=void 0)),void 0===n?Array:n}},5417:function(t,n,r){var e=r(7475);t.exports=function(t,n){return new(e(t))(0===n?0:n)}},7072:function(t,n,r){var e=r(5112)("iterator"),o=!1;try{var i=0,c={next:function(){return{done:!!i++}},return:function(){o=!0}};c[e]=function(){return this},Array.from(c,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var r=!1;try{var i={};i[e]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},4326:function(t){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},648:function(t,n,r){var e=r(1694),o=r(614),i=r(4326),c=r(5112)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=e?i:function(t){var n,r,e;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),c))?r:a?i(n):"Object"==(e=i(n))&&o(n.callee)?"Arguments":e}},9920:function(t,n,r){var e=r(2597),o=r(3887),i=r(1236),c=r(3070);t.exports=function(t,n){for(var r=o(n),a=c.f,u=i.f,s=0;s<r.length;s++){var f=r[s];e(t,f)||a(t,f,u(n,f))}}},8880:function(t,n,r){var e=r(9781),o=r(3070),i=r(9114);t.exports=e?function(t,n,r){return o.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},9114:function(t){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},6135:function(t,n,r){"use strict";var e=r(4948),o=r(3070),i=r(9114);t.exports=function(t,n,r){var c=e(n);c in t?o.f(t,c,i(0,r)):t[c]=r}},9781:function(t,n,r){var e=r(7293);t.exports=!e((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(t,n,r){var e=r(7854),o=r(111),i=e.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},8324:function(t){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:function(t,n,r){var e=r(317)("span").classList,o=e&&e.constructor&&e.constructor.prototype;t.exports=o===Object.prototype?void 0:o},7871:function(t){t.exports="object"==typeof window},1528:function(t,n,r){var e=r(8113),o=r(7854);t.exports=/ipad|iphone|ipod/i.test(e)&&void 0!==o.Pebble},6833:function(t,n,r){var e=r(8113);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(e)},5268:function(t,n,r){var e=r(4326),o=r(7854);t.exports="process"==e(o.process)},1036:function(t,n,r){var e=r(8113);t.exports=/web0s(?!.*chrome)/i.test(e)},8113:function(t,n,r){var e=r(5005);t.exports=e("navigator","userAgent")||""},7392:function(t,n,r){var e,o,i=r(7854),c=r(8113),a=i.process,u=i.Deno,s=a&&a.versions||u&&u.version,f=s&&s.v8;f?o=(e=f.split("."))[0]<4?1:e[0]+e[1]:c&&(!(e=c.match(/Edge\/(\d+)/))||e[1]>=74)&&(e=c.match(/Chrome\/(\d+)/))&&(o=e[1]),t.exports=o&&+o},748:function(t){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(t,n,r){var e=r(7854),o=r(1236).f,i=r(8880),c=r(1320),a=r(3505),u=r(9920),s=r(4705);t.exports=function(t,n){var r,f,l,p,v,h=t.target,d=t.global,m=t.stat;if(r=d?e:m?e[h]||a(h,{}):(e[h]||{}).prototype)for(f in n){if(p=n[f],l=t.noTargetGet?(v=o(r,f))&&v.value:r[f],!s(d?f:h+(m?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;u(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),c(r,f,p,t)}}},7293:function(t){t.exports=function(t){try{return!!t()}catch(t){return!0}}},9974:function(t,n,r){var e=r(9662);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 0:return function(){return t.call(n)};case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},6530:function(t,n,r){var e=r(9781),o=r(2597),i=Function.prototype,c=e&&Object.getOwnPropertyDescriptor,a=o(i,"name"),u=a&&"something"===function(){}.name,s=a&&(!e||e&&c(i,"name").configurable);t.exports={EXISTS:a,PROPER:u,CONFIGURABLE:s}},5005:function(t,n,r){var e=r(7854),o=r(614),i=function(t){return o(t)?t:void 0};t.exports=function(t,n){return arguments.length<2?i(e[t]):e[t]&&e[t][n]}},1246:function(t,n,r){var e=r(648),o=r(8173),i=r(7497),c=r(5112)("iterator");t.exports=function(t){if(null!=t)return o(t,c)||o(t,"@@iterator")||i[e(t)]}},8554:function(t,n,r){var e=r(9662),o=r(9670),i=r(1246);t.exports=function(t,n){var r=arguments.length<2?i(t):n;if(e(r))return o(r.call(t));throw TypeError(String(t)+" is not iterable")}},8173:function(t,n,r){var e=r(9662);t.exports=function(t,n){var r=t[n];return null==r?void 0:e(r)}},7854:function(t,n,r){var e=function(t){return t&&t.Math==Math&&t};t.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},2597:function(t,n,r){var e=r(7908),o={}.hasOwnProperty;t.exports=Object.hasOwn||function(t,n){return o.call(e(t),n)}},3501:function(t){t.exports={}},842:function(t,n,r){var e=r(7854);t.exports=function(t,n){var r=e.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,n))}},490:function(t,n,r){var e=r(5005);t.exports=e("document","documentElement")},4664:function(t,n,r){var e=r(9781),o=r(7293),i=r(317);t.exports=!e&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:function(t,n,r){var e=r(7293),o=r(4326),i="".split;t.exports=e((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},2788:function(t,n,r){var e=r(614),o=r(5465),i=Function.toString;e(o.inspectSource)||(o.inspectSource=function(t){return i.call(t)}),t.exports=o.inspectSource},9909:function(t,n,r){var e,o,i,c=r(8536),a=r(7854),u=r(111),s=r(8880),f=r(2597),l=r(5465),p=r(6200),v=r(3501),h="Object already initialized",d=a.WeakMap;if(c||l.state){var m=l.state||(l.state=new d),y=m.get,A=m.has,g=m.set;e=function(t,n){if(A.call(m,t))throw new TypeError(h);return n.facade=t,g.call(m,t,n),n},o=function(t){return y.call(m,t)||{}},i=function(t){return A.call(m,t)}}else{var b=p("state");v[b]=!0,e=function(t,n){if(f(t,b))throw new TypeError(h);return n.facade=t,s(t,b,n),n},o=function(t){return f(t,b)?t[b]:{}},i=function(t){return f(t,b)}}t.exports={set:e,get:o,has:i,enforce:function(t){return i(t)?o(t):e(t,{})},getterFor:function(t){return function(n){var r;if(!u(n)||(r=o(n)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},7659:function(t,n,r){var e=r(5112),o=r(7497),i=e("iterator"),c=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||c[i]===t)}},3157:function(t,n,r){var e=r(4326);t.exports=Array.isArray||function(t){return"Array"==e(t)}},614:function(t){t.exports=function(t){return"function"==typeof t}},4411:function(t,n,r){var e=r(7293),o=r(614),i=r(648),c=r(5005),a=r(2788),u=[],s=c("Reflect","construct"),f=/^\s*(?:class|function)\b/,l=f.exec,p=!f.exec((function(){})),v=function(t){if(!o(t))return!1;try{return s(Object,u,t),!0}catch(t){return!1}};t.exports=!s||e((function(){var t;return v(v.call)||!v(Object)||!v((function(){t=!0}))||t}))?function(t){if(!o(t))return!1;switch(i(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return p||!!l.call(f,a(t))}:v},4705:function(t,n,r){var e=r(7293),o=r(614),i=/#|\.prototype\./,c=function(t,n){var r=u[a(t)];return r==f||r!=s&&(o(n)?e(n):!!n)},a=c.normalize=function(t){return String(t).replace(i,".").toLowerCase()},u=c.data={},s=c.NATIVE="N",f=c.POLYFILL="P";t.exports=c},111:function(t,n,r){var e=r(614);t.exports=function(t){return"object"==typeof t?null!==t:e(t)}},1913:function(t){t.exports=!1},2190:function(t,n,r){var e=r(614),o=r(5005),i=r(3307);t.exports=i?function(t){return"symbol"==typeof t}:function(t){var n=o("Symbol");return e(n)&&Object(t)instanceof n}},408:function(t,n,r){var e=r(9670),o=r(7659),i=r(6244),c=r(9974),a=r(8554),u=r(1246),s=r(9212),f=function(t,n){this.stopped=t,this.result=n};t.exports=function(t,n,r){var l,p,v,h,d,m,y,A=r&&r.that,g=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),x=!(!r||!r.INTERRUPTED),w=c(n,A,1+g+x),E=function(t){return l&&s(l,"normal",t),new f(!0,t)},C=function(t){return g?(e(t),x?w(t[0],t[1],E):w(t[0],t[1])):x?w(t,E):w(t)};if(b)l=t;else{if(!(p=u(t)))throw TypeError(String(t)+" is not iterable");if(o(p)){for(v=0,h=i(t);h>v;v++)if((d=C(t[v]))&&d instanceof f)return d;return new f(!1)}l=a(t,p)}for(m=l.next;!(y=m.call(l)).done;){try{d=C(y.value)}catch(t){s(l,"throw",t)}if("object"==typeof d&&d&&d instanceof f)return d}return new f(!1)}},9212:function(t,n,r){var e=r(9670),o=r(8173);t.exports=function(t,n,r){var i,c;e(t);try{if(!(i=o(t,"return"))){if("throw"===n)throw r;return r}i=i.call(t)}catch(t){c=!0,i=t}if("throw"===n)throw r;if(c)throw i;return e(i),r}},7497:function(t){t.exports={}},6244:function(t,n,r){var e=r(7466);t.exports=function(t){return e(t.length)}},5948:function(t,n,r){var e,o,i,c,a,u,s,f,l=r(7854),p=r(1236).f,v=r(261).set,h=r(6833),d=r(1528),m=r(1036),y=r(5268),A=l.MutationObserver||l.WebKitMutationObserver,g=l.document,b=l.process,x=l.Promise,w=p(l,"queueMicrotask"),E=w&&w.value;E||(e=function(){var t,n;for(y&&(t=b.domain)&&t.exit();o;){n=o.fn,o=o.next;try{n()}catch(t){throw o?c():i=void 0,t}}i=void 0,t&&t.enter()},h||y||m||!A||!g?!d&&x&&x.resolve?((s=x.resolve(void 0)).constructor=x,f=s.then,c=function(){f.call(s,e)}):c=y?function(){b.nextTick(e)}:function(){v.call(l,e)}:(a=!0,u=g.createTextNode(""),new A(e).observe(u,{characterData:!0}),c=function(){u.data=a=!a})),t.exports=E||function(t){var n={fn:t,next:void 0};i&&(i.next=n),o||(o=n,c()),i=n}},3366:function(t,n,r){var e=r(7854);t.exports=e.Promise},133:function(t,n,r){var e=r(7392),o=r(7293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&e&&e<41}))},8536:function(t,n,r){var e=r(7854),o=r(614),i=r(2788),c=e.WeakMap;t.exports=o(c)&&/native code/.test(i(c))},8523:function(t,n,r){"use strict";var e=r(9662),o=function(t){var n,r;this.promise=new t((function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e})),this.resolve=e(n),this.reject=e(r)};t.exports.f=function(t){return new o(t)}},3070:function(t,n,r){var e=r(9781),o=r(4664),i=r(9670),c=r(4948),a=Object.defineProperty;n.f=e?a:function(t,n,r){if(i(t),n=c(n),i(r),o)try{return a(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[n]=r.value),t}},1236:function(t,n,r){var e=r(9781),o=r(5296),i=r(9114),c=r(5656),a=r(4948),u=r(2597),s=r(4664),f=Object.getOwnPropertyDescriptor;n.f=e?f:function(t,n){if(t=c(t),n=a(n),s)try{return f(t,n)}catch(t){}if(u(t,n))return i(!o.f.call(t,n),t[n])}},8006:function(t,n,r){var e=r(6324),o=r(748).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},5181:function(t,n){n.f=Object.getOwnPropertySymbols},6324:function(t,n,r){var e=r(2597),o=r(5656),i=r(1318).indexOf,c=r(3501);t.exports=function(t,n){var r,a=o(t),u=0,s=[];for(r in a)!e(c,r)&&e(a,r)&&s.push(r);for(;n.length>u;)e(a,r=n[u++])&&(~i(s,r)||s.push(r));return s}},5296:function(t,n){"use strict";var r={}.propertyIsEnumerable,e=Object.getOwnPropertyDescriptor,o=e&&!r.call({1:2},1);n.f=o?function(t){var n=e(this,t);return!!n&&n.enumerable}:r},7674:function(t,n,r){var e=r(9670),o=r(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,n=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),n=r instanceof Array}catch(t){}return function(r,i){return e(r),o(i),n?t.call(r,i):r.__proto__=i,r}}():void 0)},288:function(t,n,r){"use strict";var e=r(1694),o=r(648);t.exports=e?{}.toString:function(){return"[object "+o(this)+"]"}},2140:function(t,n,r){var e=r(614),o=r(111);t.exports=function(t,n){var r,i;if("string"===n&&e(r=t.toString)&&!o(i=r.call(t)))return i;if(e(r=t.valueOf)&&!o(i=r.call(t)))return i;if("string"!==n&&e(r=t.toString)&&!o(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},3887:function(t,n,r){var e=r(5005),o=r(8006),i=r(5181),c=r(9670);t.exports=e("Reflect","ownKeys")||function(t){var n=o.f(c(t)),r=i.f;return r?n.concat(r(t)):n}},2534:function(t){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:function(t,n,r){var e=r(9670),o=r(111),i=r(8523);t.exports=function(t,n){if(e(t),o(n)&&n.constructor===t)return n;var r=i.f(t);return(0,r.resolve)(n),r.promise}},2248:function(t,n,r){var e=r(1320);t.exports=function(t,n,r){for(var o in n)e(t,o,n[o],r);return t}},1320:function(t,n,r){var e=r(7854),o=r(614),i=r(2597),c=r(8880),a=r(3505),u=r(2788),s=r(9909),f=r(6530).CONFIGURABLE,l=s.get,p=s.enforce,v=String(String).split("String");(t.exports=function(t,n,r,u){var s,l=!!u&&!!u.unsafe,h=!!u&&!!u.enumerable,d=!!u&&!!u.noTargetGet,m=u&&void 0!==u.name?u.name:n;o(r)&&("Symbol("===String(m).slice(0,7)&&(m="["+String(m).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(r,"name")||f&&r.name!==m)&&c(r,"name",m),(s=p(r)).source||(s.source=v.join("string"==typeof m?m:""))),t!==e?(l?!d&&t[n]&&(h=!0):delete t[n],h?t[n]=r:c(t,n,r)):h?t[n]=r:a(n,r)})(Function.prototype,"toString",(function(){return o(this)&&l(this).source||u(this)}))},4488:function(t){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:function(t,n,r){var e=r(7854);t.exports=function(t,n){try{Object.defineProperty(e,t,{value:n,configurable:!0,writable:!0})}catch(r){e[t]=n}return n}},6340:function(t,n,r){"use strict";var e=r(5005),o=r(3070),i=r(5112),c=r(9781),a=i("species");t.exports=function(t){var n=e(t),r=o.f;c&&n&&!n[a]&&r(n,a,{configurable:!0,get:function(){return this}})}},8003:function(t,n,r){var e=r(3070).f,o=r(2597),i=r(5112)("toStringTag");t.exports=function(t,n,r){t&&!o(t=r?t:t.prototype,i)&&e(t,i,{configurable:!0,value:n})}},6200:function(t,n,r){var e=r(2309),o=r(9711),i=e("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:function(t,n,r){var e=r(7854),o=r(3505),i="__core-js_shared__",c=e[i]||o(i,{});t.exports=c},2309:function(t,n,r){var e=r(1913),o=r(5465);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.18.2",mode:e?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:function(t,n,r){var e=r(9670),o=r(9483),i=r(5112)("species");t.exports=function(t,n){var r,c=e(t).constructor;return void 0===c||null==(r=e(c)[i])?n:o(r)}},6091:function(t,n,r){var e=r(6530).PROPER,o=r(7293),i=r(1361);t.exports=function(t){return o((function(){return!!i[t]()||"​᠎"!=="​᠎"[t]()||e&&i[t].name!==t}))}},3111:function(t,n,r){var e=r(4488),o=r(1340),i="["+r(1361)+"]",c=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),u=function(t){return function(n){var r=o(e(n));return 1&t&&(r=r.replace(c,"")),2&t&&(r=r.replace(a,"")),r}};t.exports={start:u(1),end:u(2),trim:u(3)}},261:function(t,n,r){var e,o,i,c,a=r(7854),u=r(614),s=r(7293),f=r(9974),l=r(490),p=r(317),v=r(6833),h=r(5268),d=a.setImmediate,m=a.clearImmediate,y=a.process,A=a.MessageChannel,g=a.Dispatch,b=0,x={};try{e=a.location}catch(t){}var w=function(t){if(x.hasOwnProperty(t)){var n=x[t];delete x[t],n()}},E=function(t){return function(){w(t)}},C=function(t){w(t.data)},S=function(t){a.postMessage(String(t),e.protocol+"//"+e.host)};d&&m||(d=function(t){for(var n=[],r=arguments.length,e=1;r>e;)n.push(arguments[e++]);return x[++b]=function(){(u(t)?t:Function(t)).apply(void 0,n)},o(b),b},m=function(t){delete x[t]},h?o=function(t){y.nextTick(E(t))}:g&&g.now?o=function(t){g.now(E(t))}:A&&!v?(c=(i=new A).port2,i.port1.onmessage=C,o=f(c.postMessage,c,1)):a.addEventListener&&u(a.postMessage)&&!a.importScripts&&e&&"file:"!==e.protocol&&!s(S)?(o=S,a.addEventListener("message",C,!1)):o="onreadystatechange"in p("script")?function(t){l.appendChild(p("script")).onreadystatechange=function(){l.removeChild(this),w(t)}}:function(t){setTimeout(E(t),0)}),t.exports={set:d,clear:m}},1400:function(t,n,r){var e=r(9303),o=Math.max,i=Math.min;t.exports=function(t,n){var r=e(t);return r<0?o(r+n,0):i(r,n)}},5656:function(t,n,r){var e=r(8361),o=r(4488);t.exports=function(t){return e(o(t))}},9303:function(t){var n=Math.ceil,r=Math.floor;t.exports=function(t){var e=+t;return e!=e||0===e?0:(e>0?r:n)(e)}},7466:function(t,n,r){var e=r(9303),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},7908:function(t,n,r){var e=r(4488);t.exports=function(t){return Object(e(t))}},7593:function(t,n,r){var e=r(111),o=r(2190),i=r(8173),c=r(2140),a=r(5112)("toPrimitive");t.exports=function(t,n){if(!e(t)||o(t))return t;var r,u=i(t,a);if(u){if(void 0===n&&(n="default"),r=u.call(t,n),!e(r)||o(r))return r;throw TypeError("Can't convert object to primitive value")}return void 0===n&&(n="number"),c(t,n)}},4948:function(t,n,r){var e=r(7593),o=r(2190);t.exports=function(t){var n=e(t,"string");return o(n)?n:String(n)}},1694:function(t,n,r){var e={};e[r(5112)("toStringTag")]="z",t.exports="[object z]"===String(e)},1340:function(t,n,r){var e=r(648);t.exports=function(t){if("Symbol"===e(t))throw TypeError("Cannot convert a Symbol value to a string");return String(t)}},6330:function(t){t.exports=function(t){try{return String(t)}catch(t){return"Object"}}},9711:function(t){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},3307:function(t,n,r){var e=r(133);t.exports=e&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:function(t,n,r){var e=r(7854),o=r(2309),i=r(2597),c=r(9711),a=r(133),u=r(3307),s=o("wks"),f=e.Symbol,l=u?f:f&&f.withoutSetter||c;t.exports=function(t){return i(s,t)&&(a||"string"==typeof s[t])||(a&&i(f,t)?s[t]=f[t]:s[t]=l("Symbol."+t)),s[t]}},1361:function(t){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},2222:function(t,n,r){"use strict";var e=r(2109),o=r(7293),i=r(3157),c=r(111),a=r(7908),u=r(6244),s=r(6135),f=r(5417),l=r(1194),p=r(5112),v=r(7392),h=p("isConcatSpreadable"),d=9007199254740991,m="Maximum allowed index exceeded",y=v>=51||!o((function(){var t=[];return t[h]=!1,t.concat()[0]!==t})),A=l("concat"),g=function(t){if(!c(t))return!1;var n=t[h];return void 0!==n?!!n:i(t)};e({target:"Array",proto:!0,forced:!y||!A},{concat:function(t){var n,r,e,o,i,c=a(this),l=f(c,0),p=0;for(n=-1,e=arguments.length;n<e;n++)if(g(i=-1===n?c:arguments[n])){if(p+(o=u(i))>d)throw TypeError(m);for(r=0;r<o;r++,p++)r in i&&s(l,p,i[r])}else{if(p>=d)throw TypeError(m);s(l,p++,i)}return l.length=p,l}})},1539:function(t,n,r){var e=r(1694),o=r(1320),i=r(288);e||o(Object.prototype,"toString",i,{unsafe:!0})},8674:function(t,n,r){"use strict";var e,o,i,c,a=r(2109),u=r(1913),s=r(7854),f=r(5005),l=r(3366),p=r(1320),v=r(2248),h=r(7674),d=r(8003),m=r(6340),y=r(9662),A=r(614),g=r(111),b=r(5787),x=r(2788),w=r(408),E=r(7072),C=r(6707),S=r(261).set,j=r(5948),O=r(9478),L=r(842),T=r(8523),P=r(2534),k=r(9909),R=r(4705),M=r(5112),B=r(7871),_=r(5268),I=r(7392),F=M("species"),G="Promise",N=k.get,D=k.set,q=k.getterFor(G),H=l&&l.prototype,U=l,z=H,Y=s.TypeError,V=s.document,J=s.process,Z=T.f,K=Z,Q=!!(V&&V.createEvent&&s.dispatchEvent),W=A(s.PromiseRejectionEvent),$="unhandledrejection",X=!1,tt=R(G,(function(){var t=x(U),n=t!==String(U);if(!n&&66===I)return!0;if(u&&!z.finally)return!0;if(I>=51&&/native code/.test(t))return!1;var r=new U((function(t){t(1)})),e=function(t){t((function(){}),(function(){}))};return(r.constructor={})[F]=e,!(X=r.then((function(){}))instanceof e)||!n&&B&&!W})),nt=tt||!E((function(t){U.all(t).catch((function(){}))})),rt=function(t){var n;return!(!g(t)||!A(n=t.then))&&n},et=function(t,n){if(!t.notified){t.notified=!0;var r=t.reactions;j((function(){for(var e=t.value,o=1==t.state,i=0;r.length>i;){var c,a,u,s=r[i++],f=o?s.ok:s.fail,l=s.resolve,p=s.reject,v=s.domain;try{f?(o||(2===t.rejection&&at(t),t.rejection=1),!0===f?c=e:(v&&v.enter(),c=f(e),v&&(v.exit(),u=!0)),c===s.promise?p(Y("Promise-chain cycle")):(a=rt(c))?a.call(c,l,p):l(c)):p(e)}catch(t){v&&!u&&v.exit(),p(t)}}t.reactions=[],t.notified=!1,n&&!t.rejection&&it(t)}))}},ot=function(t,n,r){var e,o;Q?((e=V.createEvent("Event")).promise=n,e.reason=r,e.initEvent(t,!1,!0),s.dispatchEvent(e)):e={promise:n,reason:r},!W&&(o=s["on"+t])?o(e):t===$&&L("Unhandled promise rejection",r)},it=function(t){S.call(s,(function(){var n,r=t.facade,e=t.value;if(ct(t)&&(n=P((function(){_?J.emit("unhandledRejection",e,r):ot($,r,e)})),t.rejection=_||ct(t)?2:1,n.error))throw n.value}))},ct=function(t){return 1!==t.rejection&&!t.parent},at=function(t){S.call(s,(function(){var n=t.facade;_?J.emit("rejectionHandled",n):ot("rejectionhandled",n,t.value)}))},ut=function(t,n,r){return function(e){t(n,e,r)}},st=function(t,n,r){t.done||(t.done=!0,r&&(t=r),t.value=n,t.state=2,et(t,!0))},ft=function(t,n,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===n)throw Y("Promise can't be resolved itself");var e=rt(n);e?j((function(){var r={done:!1};try{e.call(n,ut(ft,r,t),ut(st,r,t))}catch(n){st(r,n,t)}})):(t.value=n,t.state=1,et(t,!1))}catch(n){st({done:!1},n,t)}}};if(tt&&(z=(U=function(t){b(this,U,G),y(t),e.call(this);var n=N(this);try{t(ut(ft,n),ut(st,n))}catch(t){st(n,t)}}).prototype,(e=function(t){D(this,{type:G,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=v(z,{then:function(t,n){var r=q(this),e=Z(C(this,U));return e.ok=!A(t)||t,e.fail=A(n)&&n,e.domain=_?J.domain:void 0,r.parent=!0,r.reactions.push(e),0!=r.state&&et(r,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e,n=N(t);this.promise=t,this.resolve=ut(ft,n),this.reject=ut(st,n)},T.f=Z=function(t){return t===U||t===i?new o(t):K(t)},!u&&A(l)&&H!==Object.prototype)){c=H.then,X||(p(H,"then",(function(t,n){var r=this;return new U((function(t,n){c.call(r,t,n)})).then(t,n)}),{unsafe:!0}),p(H,"catch",z.catch,{unsafe:!0}));try{delete H.constructor}catch(t){}h&&h(H,z)}a({global:!0,wrap:!0,forced:tt},{Promise:U}),d(U,G,!1,!0),m(G),i=f(G),a({target:G,stat:!0,forced:tt},{reject:function(t){var n=Z(this);return n.reject.call(void 0,t),n.promise}}),a({target:G,stat:!0,forced:u||tt},{resolve:function(t){return O(u&&this===i?U:this,t)}}),a({target:G,stat:!0,forced:nt},{all:function(t){var n=this,r=Z(n),e=r.resolve,o=r.reject,i=P((function(){var r=y(n.resolve),i=[],c=0,a=1;w(t,(function(t){var u=c++,s=!1;i.push(void 0),a++,r.call(n,t).then((function(t){s||(s=!0,i[u]=t,--a||e(i))}),o)})),--a||e(i)}));return i.error&&o(i.value),r.promise},race:function(t){var n=this,r=Z(n),e=r.reject,o=P((function(){var o=y(n.resolve);w(t,(function(t){o.call(n,t).then(r.resolve,e)}))}));return o.error&&e(o.value),r.promise}})},3210:function(t,n,r){"use strict";var e=r(2109),o=r(3111).trim;e({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return o(this)}})},4747:function(t,n,r){var e=r(7854),o=r(8324),i=r(8509),c=r(8533),a=r(8880),u=function(t){if(t&&t.forEach!==c)try{a(t,"forEach",c)}catch(n){t.forEach=c}};for(var s in o)o[s]&&u(e[s]&&e[s].prototype);u(i)},450:function(t,n,r){"use strict";var e=r(7537),o=r.n(e),i=r(3645),c=r.n(i)()(o());c.push([t.id,"*,*::after,*::before{padding:0;margin:0}body{font-family:Arial,Helvetica,sans-serif}ul{list-style-type:none}button,li,input{padding:.2em .4em}button,input[type=submit]{font-weight:bold;border:2px solid #000}button:disabled,input[type=submit]:disabled{border:2px solid #a0a0a0}header{padding:2rem}main{display:-webkit-box;display:-ms-flexbox;display:flex;grid-gap:4rem;gap:4rem;margin:0 auto;width:-webkit-fit-content;width:fit-content;width:-moz-fit-content}main .header{display:-webkit-box;display:-ms-flexbox;display:flex;grid-gap:1rem;gap:1rem;margin-top:1rem;margin-bottom:1rem}main #scoreboard{border:2px solid #000}main #scoreboard li:nth-child(even){background-color:#d3d3d3}main .add-score form{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;grid-gap:1rem;gap:1rem}main .add-score form input[type=submit]{width:-webkit-min-content;width:-moz-min-content;width:min-content;margin-left:auto}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,qBAGE,SAAA,CACA,QAAA,CAGF,KACE,sCAAA,CAGF,GACE,oBAAA,CAGF,gBAGE,iBAAA,CAGF,0BAEE,gBAAA,CACA,qBAAA,CAEA,4CACE,wBAAA,CAIJ,OACE,YAAA,CAGF,KACE,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,aAAA,CAAA,QAAA,CACA,aAAA,CACA,yBAAA,CAAA,iBAAA,CACA,sBAAA,CAEA,aACE,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,aAAA,CAAA,QAAA,CACA,eAAA,CAAA,kBAAA,CAGF,iBACE,qBAAA,CAEA,oCACE,wBAAA,CAIJ,qBACE,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,2BAAA,CAAA,4BAAA,CAAA,yBAAA,CAAA,qBAAA,CACA,aAAA,CAAA,QAAA,CAEA,wCACE,yBAAA,CAAA,sBAAA,CAAA,iBAAA,CACA,gBAAA",sourcesContent:["*,\r\n*::after,\r\n*::before {\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n}\r\n\r\nbutton,\r\nli,\r\ninput {\r\n  padding: 0.2em 0.4em;\r\n}\r\n\r\nbutton,\r\ninput[type=submit] {\r\n  font-weight: bold;\r\n  border: 2px solid black;\r\n\r\n  &:disabled {\r\n    border: 2px solid rgb(160, 160, 160);\r\n  }\r\n}\r\n\r\nheader {\r\n  padding: 2rem;\r\n}\r\n\r\nmain {\r\n  display: flex;\r\n  gap: 4rem;\r\n  margin: 0 auto;\r\n  width: fit-content;\r\n  width: -moz-fit-content;\r\n\r\n  .header {\r\n    display: flex;\r\n    gap: 1rem;\r\n    margin-block: 1rem;\r\n  }\r\n\r\n  #scoreboard {\r\n    border: 2px solid black;\r\n\r\n    li:nth-child(even) {\r\n      background-color: rgb(211, 211, 211);\r\n    }\r\n  }\r\n\r\n  .add-score form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n\r\n    input[type=submit] {\r\n      width: min-content;\r\n      margin-left: auto;\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]),n.Z=c},3645:function(t){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var r="",e=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),e&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=t(n),e&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(t,r,e,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var c={};if(e)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(c[u]=!0)}for(var s=0;s<t.length;s++){var f=[].concat(t[s]);e&&c[f[0]]||(void 0!==i&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=i),r&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=r):f[2]=r),o&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=o):f[4]="".concat(o)),n.push(f))}},n}},7537:function(t){"use strict";t.exports=function(t){var n=t[1],r=t[3];if(!r)return n;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),i="/*# ".concat(o," */"),c=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(c).concat([i]).join("\n")}return[n].join("\n")}},5666:function(t){var n=function(t){"use strict";var n,r=Object.prototype,e=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function u(t,n,r){return Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{u({},"")}catch(t){u=function(t,n,r){return t[n]=r}}function s(t,n,r,e){var o=n&&n.prototype instanceof m?n:m,i=Object.create(o.prototype),c=new L(e||[]);return i._invoke=function(t,n,r){var e=l;return function(o,i){if(e===v)throw new Error("Generator is already running");if(e===h){if("throw"===o)throw i;return P()}for(r.method=o,r.arg=i;;){var c=r.delegate;if(c){var a=S(c,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(e===l)throw e=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e=v;var u=f(t,n,r);if("normal"===u.type){if(e=r.done?h:p,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(e=h,r.method="throw",r.arg=u.arg)}}}(t,r,c),i}function f(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",p="suspendedYield",v="executing",h="completed",d={};function m(){}function y(){}function A(){}var g={};u(g,i,(function(){return this}));var b=Object.getPrototypeOf,x=b&&b(b(T([])));x&&x!==r&&e.call(x,i)&&(g=x);var w=A.prototype=m.prototype=Object.create(g);function E(t){["next","throw","return"].forEach((function(n){u(t,n,(function(t){return this._invoke(n,t)}))}))}function C(t,n){function r(o,i,c,a){var u=f(t[o],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&e.call(l,"__await")?n.resolve(l.__await).then((function(t){r("next",t,c,a)}),(function(t){r("throw",t,c,a)})):n.resolve(l).then((function(t){s.value=t,c(s)}),(function(t){return r("throw",t,c,a)}))}a(u.arg)}var o;this._invoke=function(t,e){function i(){return new n((function(n,o){r(t,e,n,o)}))}return o=o?o.then(i,i):i()}}function S(t,r){var e=t.iterator[r.method];if(e===n){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=n,S(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=f(e,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,d;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=n),r.delegate=null,d):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function j(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function O(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function L(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function T(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,c=function r(){for(;++o<t.length;)if(e.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=n,r.done=!0,r};return c.next=c}}return{next:P}}function P(){return{value:n,done:!0}}return y.prototype=A,u(w,"constructor",A),u(A,"constructor",y),y.displayName=u(A,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===y||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,A):(t.__proto__=A,u(t,a,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(C.prototype),u(C.prototype,c,(function(){return this})),t.AsyncIterator=C,t.async=function(n,r,e,o,i){void 0===i&&(i=Promise);var c=new C(s(n,r,e,o),i);return t.isGeneratorFunction(r)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},E(w),u(w,a,"Generator"),u(w,i,(function(){return this})),u(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},t.values=T,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(O),!t)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(e,o){return a.type="throw",a.arg=t,r.next=e,o&&(r.method="next",r.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var u=e.call(c,"catchLoc"),s=e.call(c,"finallyLoc");if(u&&s){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=n,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(c)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var o=e.arg;O(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:T(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=n),d}},t}(t.exports);try{regeneratorRuntime=n}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}},3379:function(t){"use strict";var n=[];function r(t){for(var r=-1,e=0;e<n.length;e++)if(n[e].identifier===t){r=e;break}return r}function e(t,e){for(var i={},c=[],a=0;a<t.length;a++){var u=t[a],s=e.base?u[0]+e.base:u[0],f=i[s]||0,l="".concat(s," ").concat(f);i[s]=f+1;var p=r(l),v={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==p)n[p].references++,n[p].updater(v);else{var h=o(v,e);e.byIndex=a,n.splice(a,0,{identifier:l,updater:h,references:1})}c.push(l)}return c}function o(t,n){var r=n.domAPI(n);return r.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;r.update(t=n)}else r.remove()}}t.exports=function(t,o){var i=e(t=t||[],o=o||{});return function(t){t=t||[];for(var c=0;c<i.length;c++){var a=r(i[c]);n[a].references--}for(var u=e(t,o),s=0;s<i.length;s++){var f=r(i[s]);0===n[f].references&&(n[f].updater(),n.splice(f,1))}i=u}}},569:function(t){"use strict";var n={};t.exports=function(t,r){var e=function(t){if(void 0===n[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}(t);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(r)}},9216:function(t){"use strict";t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},3565:function(t,n,r){"use strict";t.exports=function(t){var n=r.nc;n&&t.setAttribute("nonce",n)}},7795:function(t){"use strict";t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(r){!function(t,n,r){var e="";r.supports&&(e+="@supports (".concat(r.supports,") {")),r.media&&(e+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(e+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),e+=r.css,o&&(e+="}"),r.media&&(e+="}"),r.supports&&(e+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(e,t,n.options)}(n,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},4589:function(t){"use strict";t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={id:e,exports:{}};return t[e](i,i.exports,r),i.exports}r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,{a:n}),n},r.d=function(t,n){for(var e in n)r.o(n,e)&&!r.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},function(){"use strict";var t=r(3379),n=r.n(t),e=r(7795),o=r.n(e),i=r(569),c=r.n(i),a=r(3565),u=r.n(a),s=r(9216),f=r.n(s),l=r(4589),p=r.n(l),v=r(450),h={};function d(t,n,r,e,o,i,c){try{var a=t[i](c),u=a.value}catch(t){return void r(t)}a.done?n(u):Promise.resolve(u).then(e,o)}function m(t){return function(){var n=this,r=arguments;return new Promise((function(e,o){var i=t.apply(n,r);function c(t){d(i,e,o,c,a,"next",t)}function a(t){d(i,e,o,c,a,"throw",t)}c(void 0)}))}}h.styleTagTransform=p(),h.setAttributes=u(),h.insert=c().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=f(),n()(v.Z,h),v.Z&&v.Z.locals&&v.Z.locals,r(5666),r(4747),r(2222),r(3210),r(1539),r(8674);var y="https://us-central1-js-capstone-backend.cloudfunctions.net/api",A="sa7iLyWCcC3Ao7tJMfAb",g=function(){var t=m(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(y,"/games/").concat(A,"/scores"));case 2:return n=t.sent,t.abrupt("return",n.json());case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),b=function(){var t=m(regeneratorRuntime.mark((function t(n,r){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch("".concat(y,"/games/").concat(A,"/scores/"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:n,score:r})});case 2:return e=t.sent,t.abrupt("return",e.json());case 4:case"end":return t.stop()}}),t)})));return function(n,r){return t.apply(this,arguments)}}();function x(t,n,r,e,o,i,c){try{var a=t[i](c),u=a.value}catch(t){return void r(t)}a.done?n(u):Promise.resolve(u).then(e,o)}function w(t){return function(){var n=this,r=arguments;return new Promise((function(e,o){var i=t.apply(n,r);function c(t){x(i,e,o,c,a,"next",t)}function a(t){x(i,e,o,c,a,"throw",t)}c(void 0)}))}}var E=function(){var t=w(regeneratorRuntime.mark((function t(){var n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=document.getElementById("scoreboard"),t.next=3,g();case 3:r=t.sent,n.innerHTML="",r.result.forEach((function(t){var r=t.user,e=t.score,o=document.createElement("li");o.textContent="".concat(r,": ").concat(e),n.appendChild(o)}));case 6:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),C=function(){var t=w(regeneratorRuntime.mark((function t(n,r){var e,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=n.trim(),o=parseInt(r.trim(),10),e&&o){t.next=4;break}return t.abrupt("return",!1);case 4:return t.next=6,b(e,o);case 6:if(!t.sent.message){t.next=9;break}return t.abrupt("return",!1);case 9:return t.abrupt("return",!0);case 10:case"end":return t.stop()}}),t)})));return function(n,r){return t.apply(this,arguments)}}(),S=function(t,n){t.disabled=!!n},j=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){t.value=""}))};function O(t,n,r,e,o,i,c){try{var a=t[i](c),u=a.value}catch(t){return void r(t)}a.done?n(u):Promise.resolve(u).then(e,o)}document.body.innerHTML='\n  <header>\n    <h1>Leaderboard</h1>\n  </header>\n  <main>\n    <section class="leaderboard">\n      <div class="header">\n        <h2>Recent scores</h2>\n        <button id="refresh-btn" type="button">Refresh</button>\n      </div>\n      <ul id="scoreboard">\n      </ul>\n    </section>\n    <section class="add-score">\n      <div class="header">\n        <h2>Add your score</h2>\n      </div>\n      <form action="#">\n        <input type="text" name="name" id="name" placeholder="Your name" required>\n        <input type="number" name="score" id="score" placeholder="Your score" required>\n        <input type="submit" value="Submit">\n      </form>\n    </section>\n  </main>\n  ',function(){var t=document.getElementById("refresh-btn");t.addEventListener("click",E),t.click();var n=document.querySelector("form"),r=document.getElementById("name"),e=document.getElementById("score");n.addEventListener("submit",function(){var t,o=(t=regeneratorRuntime.mark((function t(o){var i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o.preventDefault(),i=n.querySelector("input[type=submit]"),S(i,!0),t.next=5,C(r.value,e.value);case 5:t.sent&&E(),j(r,e),S(i,!1);case 9:case"end":return t.stop()}}),t)})),function(){var n=this,r=arguments;return new Promise((function(e,o){var i=t.apply(n,r);function c(t){O(i,e,o,c,a,"next",t)}function a(t){O(i,e,o,c,a,"throw",t)}c(void 0)}))});return function(t){return o.apply(this,arguments)}}())}()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,